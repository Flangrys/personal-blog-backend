# Generated by Django 5.1.3 on 2024-11-20 23:43

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import app.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_id', models.AutoField(primary_key=True, serialize=False)),
                ('tag_name', models.CharField(max_length=30)),
                ('tag_description', models.CharField(blank=True, max_length=70, null=True)),
            ],
            options={
                'verbose_name': 'tag',
                'verbose_name_plural': 'tags',
                'ordering': ['tag_name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('user_snowflake', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('user_nickname', models.CharField(max_length=30, validators=[app.validators.nickname_validation], verbose_name='nickname')),
                ('is_writter', models.BooleanField(default=False, help_text='Designates whether this user should be treated as a post creator.', verbose_name='writter status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'users',
                'verbose_name_plural': 'users',
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_id', models.AutoField(primary_key=True, serialize=False)),
                ('post_title', models.CharField(max_length=70)),
                ('post_description', models.CharField(max_length=300)),
                ('post_slug', models.SlugField(max_length=40)),
                ('post_pinned', models.BooleanField(default=False)),
                ('post_status', models.CharField(choices=[('recent', 'Recent'), ('edited', 'Edited'), ('old', 'Old')], default='recent', max_length=6)),
                ('post_karma', models.IntegerField(default=0)),
                ('post_date', models.DateField(default=django.utils.timezone.now)),
                ('post_modified_date', models.DateField(blank=True, null=True)),
                ('post_content', models.TextField()),
                ('post_author', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('post_parent', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.post')),
                ('post_tags', models.ManyToManyField(to='app.tag')),
            ],
            options={
                'ordering': ['post_title'],
            },
        ),
    ]
